name: production

on:
  push:
    branches: [ master ]

jobs:
  verify:
    name: verify
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: test
        uses: actions/setup-node@v1
        with:
          node-version: 12.20.0
      - run: npm ci
      - run: npm test

  deploy:
    name: deploy
    needs: verify
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: aws ecr login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build, tag, and push image to aws ecr
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: node-docker
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: render aws ecs task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: node-docker-task-definition.json
          container-name: node-docker-container
          image: ${{ steps.build-image.outputs.image }}

      - name: deploy aws ecs task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: node-docker-service
          cluster: node-docker-cluster
          wait-for-service-stability: true
